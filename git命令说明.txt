
配置git全局用户名：git config --global user.name ""
配置用户对应的邮箱：git config --global user.email ""
初始化一个仓库：git init 
添加文件：git add [文件名]  --> 注意，可反复多次使用，添加多个文件：git add 文件1 文件2 文件2
		git add . --> 添加当前所有
		git add -A  --> 提交所有变化，添加所有修改，新增，删除的文件 （all）
提交文件：git commit -m [后面输入的是本次提交的说明] --> git commit -m '首次提交'
修改文件后看结果： git status
git status告诉你有文件被修改过

1、用git diff可以查看修改内容
2、git diff <source_branch> <target_branch>
使用该命令之后需要输入q+回车，才可以重新进行输入

查看每次提交的内容：git log
 -- 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数-->git log--pretty=oneline

HEAD：当前版本
HEAD^：上个版本
HEAD^^：上上个版本
HEAD~100：往上100个版本

回退上个版本：git reset --hard HEAD^
回到指定的版本：git reset --hard [commit id,如：b0c3d]

如果忘记commit id,可使用回看log: git reflog

在还没进行commit前，修改的文件已在在暂存区中时，要重新修改内容，可使用：
git checkout -- [文件名]。 --	》命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
执行之后，暂存区会清空该文件add的记录

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。



删除文件：git rm [文件]
两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
git checkout -- [文件]
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”


====================================================================================
本地仓库关联远程仓库：

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
如关联github：git remote add origin git@github.com:[自己的github名]/[创建的远程仓库名].git
如关联gitee：git remote add origin git@gitee.com:[自己的github名]/[创建的远程仓库名].git

关联后，
1、add需要的的文件： git add .  -->添加当前文件夹下的所有文件
2、提交说明：git commit -m '说明'
3、使用命令git push -u origin(上面关联时的名字) master 第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
提交本地仓库，跟上面说明的：1、git add [文件] 2、git commit -m [提交描述]
提交远程仓库： git push origin master



从远程仓库克隆一个本地仓库：
git clone git@github.com:server-name:path/repo-name.git
github：git@github.com:[自己的github名]/[创建的远程仓库名].git

====================================================================================
创建分支 dev：(-b 表示创建并切换)
git checkout -b dev

查看当前分支：(会列出所有分支，当前分支前面会标有一个 * )
git branch

----
这里是在分支上添加的内容
 分支跟之前的操作一样，修改好后进行 1、add 2、commit

在dev的分支上的工作完成后，切回master分支：
git checkout master

----
这是在切换回master主分支，执行合并（git merge dev）后的操作

合并分支：git merge [分支名称]
删除分支：git branch -d [分支名称]

总结：
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

强行删除分支： git branch -D <name>

====================================================================================
这里是解决两个分支不同操作后的修复合并的说明

==================================================================================
使用带参数的 git log 查看分支的合并情况：(这条命令查看的非常直观)
简介版：
git log --graph --pretty=oneline --abbrev-commit
详细版：
git log --graph

====================================================================================
这是在分支上新增的内容，之后切换到master主分支后，进行合并分支（使用 --no-ff ,普通模式合并，能看出曾经做过合并，之前默认的合并是没有合并历史的）

完整命令：（--no-ff:不实用默认的 Fase forward 模式，这种模式下，删除分支后，丢掉分支信息）
git merge --no-ff -m "合并提交的说明" [分支名称]

====================================================================================
在分支 dev 上做开发的时候，临时有其他bug需要进行修复的，先保存 dev 上的内容：
命令行：
 git stash

然后切换到需要修复bug的分支上，在该分支上新开issue-bug 分支，进行修复后合并提交，
在切换回 dev 分支，此时工作区是干净的，执行命令查看之前的工作现场：
git stash list
恢复有两种办法：
1、用 git stash apply stash@(0),但是恢复后，stash内容并没有删除，需要用 git stash drop 来删除
2、用 git stash pop ,恢复的同时把stash内容也删除了

==================================================================================
多人协作：

 查看远程库的信息：git remote
 需要显示更详细的信息：git remote -v 
 		-- origin git@github.com:[自己的github名]/[创建的远程仓库名].git(fetch)
 		-- origin git@github.com:[自己的github名]/[创建的远程仓库名].git(push)
 		显示可以抓取和推送的origin的地址，如果没有推送权限，就看不到push的地址

 推送分支：
  推送分支到远程库：
    推送 dev 分支：
  	git push origin dev

  克隆远程分支dev到本地：(git checkout -b [本地分支名] [origin/远程分支名])
  	git checkout -b dev origin/dev 


  多人协作的工作模式通常是这样：
	首先，可以试图用git push origin <branch-name>推送自己的修改；
	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	如果合并有冲突，则解决冲突，并在本地提交；
	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

小结：
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin [branch-name]，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

==================================================================================
小结：
	新建标签：
		命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；（标签还未存在时才可执行）
		命令git tag可以查看所有标签。
	操作标签：
		命令git push origin <tagname>可以推送一个本地标签；
		命令git push origin --tags可以推送全部未推送过的本地标签；
		命令git tag -d <tagname>可以删除一个本地标签；
		命令git push origin :refs/tags/<tagname>可以删除一个远程标签。


==================================================================================
码云：
	gitee.com
github:
	github.com

如果先连接github仓库后连接码云仓库，push 到码云仓库时出错：
	$ git push [本地连接码云远程仓库的名字] [提交的本地分支名]
	To gitee.com:[用户名]/[仓库名].git
	 ! [rejected]        [提交的本地分支名] -> [提交的本地分支名] (fetch first)
	error: failed to push some refs to 'git@gitee.com:[用户名]/[仓库名].git'
	hint: Updates were rejected because the remote contains work that you do
	hint: not have locally. This is usually caused by another repository pushing
	hint: to the same ref. You may want to first integrate the remote changes
	hint: (e.g., 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.

	使用 git pull 后 push 仍然出错。
	尝试：
		git pull gitee master --allow-unrelated-histories，先提交一下，再push

	该解决方案出现在：
		https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000#0

		评论区中用户：强颜欢笑 的回复，个人验证是可以的，以此记录。

==================================================================================
忽略特殊文件
 	github提供的各种需要类型的忽略文件描述：
 		https://github.com/github/gitignore


有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：
$ git add App.class
	The following paths are ignored by one of your .gitignore files:
	App.class
	Use -f if you really want to add them.
	如果你确实想添加该文件，可以用-f强制添加到Git：

$ git add -f App.class
或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git checkoutck-ignore命令检查：

$ git check-ignore -v App.class
	.gitignore:3:*.class    App.class
	Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。

小结：
	忽略某些文件时，需要编写.gitignore；
	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！


==================================================================================
配置别名：
	$ git config --global alias.st status
	以后 git status  --> git st

	同理：
	$ git config --global alias.co checkout
	$ git config --global alias.ci commit
	$ git config --global alias.br branch

	$ git config --global alias.unstage 'reset HEAD'
		--  当你敲入命令：
			$ git unstage test.py
			实际上Git执行的是：
			$ git reset HEAD test.py

	配置一个git last，让其显示最后一次提交信息：
		--  $ git config --global alias.last 'log -1'
	配置 log :
			git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

	配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
	配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：	


==================================================================================
















